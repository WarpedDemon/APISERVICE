{"filter":false,"title":"PHPAPI.php","tooltip":"/PHPAPI.php","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":10,"column":7},"action":"remove","lines":["<html><body>","<?php","// A simple web site in Cloud9 that runs through Apache","// Press the 'Run' button on the top to start the web server,","// then click the URL that is emitted to the Output tab of the console","","echo 'Hello world from Cloud9!';","","?>","</body>","</html>"],"id":3},{"start":{"row":0,"column":0},"end":{"row":729,"column":2},"action":"insert","lines":["<?php","","/*   # Matt's API o' Magic # ","   [Partially Commented Version] */","   ","   ","/*","","[Request List]:","","\t- 'Login' - Authenticates requesting user and returns all information stored in the database associated with","\t\t\t\t   that user.","\t\t\t\t   ","    - 'GetContacts' - Returns requesting user's Contact List.","\t","\t- 'GetId' - Returns requesting user's database Id.","\t","\t- 'AddContact' - Adds a contact to the requesting user's contact list.","\t","\t- 'NewUser' - Adds a new user to the messenger app.","","[Error List]:","","\t- Forbidden (403) - Thrown when a user's credentials fail to Authenticate.","","\t- Precondition Failed (412) - Thrown when an API call lacks essential post information.","","*/   ","","class Conversation {","","\tpublic $Contact;","\tpublic $Messages;","\tpublic $ConversationId;","\t","\tfunction __construct($par1, $par2, $par3) {","\t\t$this->Messages = $par1;","\t\t$this->ConversationId = $par2;","\t\t$this->Contact = $par3;","\t}","}","","class PossibleObject {","\t","\tpublic $ConversationName;","\tpublic $ContactName;","\t","\tfunction __construct($par1, $par2) {","\t\t","\t\t$this->ConversationName = $par1;","\t\t$this->ContactName = $par2;","\t\t","\t}","\t","}","","class HttpResponse {","","\t//Error","\tconst STATUS_PRECONDITION_FAILED = 412;","\tconst STATUS_FORBIDDEN = 403;","\tconst STATUS_INTERNAL_SERVER_ERROR = 500;","\tconst STATUS_UNPROCESSABLE_ENTITY = 422;","\tconst STATUS_CONFLICT = 409;","\tconst STATUS_SERVICE_ERROR = 503;","\tconst STATUS_BAD_REQUEST = 400;","\t","\t//Success","\tconst STATUS_OK = 200;","\tconst STATUS_CREATED = 201;","\tconst STATUS_ACCEPTED = 202;","\tconst STATUS_UNAUTHORIZED = 401;","\t","\tpublic $Status;","\tpublic $Response;","\t","\tfunction __construct($par1, $par2) {","\t\t$this->Status = $par1;","\t\t$this->Response = $par2;","\t}","\t","}","","/*","$TempUser['Id'] = \"3\";","$TempUser['Username'] = \"Warpeddemon\" ;","$TempUser['Password'] =  \"pass\";","$TempUser['Status'] = \"User\";","$TempUser['Banned'] = \"false\";","$TempUser['Contacts'] = \"[{}]\";  ","","  ","$Person2['Username'] = \"RightBehindu\";","$Person2['Id'] = \"1\"; ","*/","$Person3['Username'] = \"bob\";","$Person3['Id'] = \"2\";","  /* "," // TEST CHUNK #1 "," ","$_POST['Username'] = \"Warpeddemon\";","$_POST['Password'] = \"pass\";","$_POST['Message'] = \"HELLO THAR\";","$_POST['Request'] = \"AcceptFriendRequest\";","$_POST['Contact'] = $Person2;  ","","// TEST CHUNK #2 ","$_POST['Username'] = \"RightBehindu\";","$_POST['Password'] = \"pass\";","$_POST['Request'] = \"Login\";","$_POST['Contact'] = '{\"Id\":\"10\",\"Username\":\"bill\"}';","$_POST['Message'] = \"Hhi\";  "," */","",""," ","if($_POST) {","\t//If attempting to access sensitive data which requires user credentials.","\tif(!isset($_POST['Username']) || !isset($_POST['Password']) || !isset($_POST['Request'])) {","\t\t//If the base expected POST variables are not met, throw error 412.","\t\techo ThrowPrecondition();","\t\treturn;","\t}","\t","\t$Request = $_POST['Request'];","\t$User = AuthenticateUser($_POST['Username'], $_POST['Password']);","\t","\t//If the user is returned as false, throw a forbidden 403 error.","\tif($User === false) {","\t\tThrowUnauthorized();","\t\treturn;","\t}","","\t","\t// API EVENT REQUESTS  //","\t","\tif($Request === \"Login\") {","\t\techo json_encode($User);","\t\treturn;","\t}","\t","\tif($Request === \"NewUser\") {","\t\tif(!isset($_POST['NewUser'])) {","\t\t\tThrowPrecondition();","\t\t\treturn;","\t\t} else {","\t\t\tif($User['Status'] === \"Admin\") {","\t\t\t\tAddNewUser($_POST['Username'], $_POST['Password'], $_POST['NewUser']);","\t\t\t} else {","\t\t\t\tThrowForbidden();","\t\t\t\treturn;","\t\t\t}","\t\t\treturn;","\t\t}","\t}","\t","\tif($Request === \"GetContacts\") {","\t\techo json_encode($User['Contacts']);","\t\treturn;","\t} ","\t","\tif($Request === \"GetId\") {","\t\techo json_encode($User['Id']);","\t\treturn;","\t}","\t","\tif($Request === \"AddContact\") {","\t\tif(!isset($_POST['NewContact'])) {","\t\t\t//If the new contact to add has not been defined.","\t\t\tThrowPrecondition();","\t\t\treturn;","\t\t} else {","\t\t\t$result = AddContact($_POST['Username'], $_POST['Password'], $_POST['NewContact']);","\t\t\tif($result) {","\t\t\t\techo true;","\t\t\t\treturn;","\t\t\t} else {","\t\t\t\tThrowService();","\t\t\t\treturn;","\t\t\t}","\t\t}","\t}","\t","\tif($Request === \"NewConversation\") {","\t\tif(!isset($_POST['Contact'])) {","\t\t\tThrowPrecondition();","\t\t\treturn;","\t\t}","\t\tCreateNewConversation($User, $_POST['Contact']);","\t\treturn;","\t}","\t","\tif($Request === \"AddContactsTemp\") {","\t\trun($_POST['Username'], $_POST['Password']);","\t}","\t","\t","\tif($Request === \"NewMessage\") {","\t\tif(!isset($_POST['Message']) || !isset($_POST['Contact'])) {","\t\t\tThrowPrecondition();","\t\t\treturn;","\t\t}","\t\t$_POST['Contact'] = json_decode($_POST['Contact']);","\t\tSendMessage($User, $_POST['Message'], $_POST['Contact']);","\t\treturn;","\t}","\t","\tif($Request === \"FriendRequest\") {","\t\tif(!isset($_POST['Contact'])) {","\t\t\tThrowPrecondition();","\t\t\treturn;","\t\t}","\t\t","\t\tSendFriendRequest($User, $_POST['Contact']);","\t\treturn;","\t}","\t","\tif($Request === \"AcceptFriendRequest\") {","\t\tif(!isset($_POST['Contact'])) {","\t\t\tThrowPrecondition();","\t\t\treturn;","\t\t}","\t\tAcceptFriendRequest($User, $_POST['Contact']);","\t\treturn;","\t}","\t","\tif($Request === \"GetConversations\") {","\t\tGetConversationList($User);","\t\treturn;","\t}","\t","\tif($Request === \"GetFriendRequests\") {","\t\tGetFriendRequests($User);","\t\treturn;","\t}","\t","\tThrowBadRequest();","\treturn;","}","","\t// API FUNCTIONS //","","//Accepts a friend request for a user from a parsed contact.","function AcceptFriendRequest($User, $Contact) {","\t","\t$db = CreateConnectionObject();","\tif($db === false) { ThrowService(); return; }","\t","\t$CurrentFriendRequests = json_decode($User['FriendRequests'], true);","\t","\tif($CurrentFriendRequests === null) {","\t\tThrowInternal();","\t\treturn;","\t}","\tfor($i = 0; $i < count($CurrentFriendRequests); $i++) {","\t\t$request = $CurrentFriendRequests[$i];","\t\tif($request['Username'] === $Contact['Username']) {","\t\t\t$NewFriendRequests = $CurrentFriendRequests;","\t\t\tarray_splice($NewFriendRequests, $i, 1);","\t\t\t$result = UpdateUserRequests($User, $NewFriendRequests, $db);","\t\t\tAddContact($User['Username'], $User['Password'], $Contact);","\t\t\tif(!$result) {","\t\t\t\t//If there was no update.","\t\t\t\tThrowInternal();","\t\t\t\tThrowService();","\t\t\t\treturn;","\t\t\t} else {","\t\t\t\techo \"\\nAccepted!\";","\t\t\t\treturn;","\t\t\t}","\t\t}","\t}","\tThrowInternal();","\treturn false;","}","","//Updates a users friend requests with a parsed friend request. Used in SendFriendRequest.","function UpdateUserRequests($User, $FriendRequests, $db) {","","\t","\t$stmt = \"UPDATE logins SET FriendRequests=:friends WHERE Username=:username AND Id=:id\";","\t$query = $db->prepare($stmt);","\t$query->execute(array('friends'=>json_encode($FriendRequests), 'username'=>$User['Username'],'id'=>$User['Id']));","\t","\t$result = $query->rowCount();","\t","\tif($result > 0) {","\t\treturn true;","\t} else {","\t\treturn false;","\t}","}","\t","//Sends a friend request from a user to a parsed contact.","function SendFriendRequest($User, $Contact) {","\t","\t$db = CreateConnectionObject();","\tif($db === false) { ThrowService(); return; }","","\tif(isFriend($User, $Contact, $db)) {","\t\techo \"Bad Request (400) - User is already a friend\";","\t\treturn;","\t}","\t","\tif(FriendRequestAlreadySent($User, $Contact, $db)) {","\t\techo \"Bad Request (400) - User has already requested to be friends with this user.\";","\t\treturn;","\t}","\t","\t$newFriendRequest = array();","\t$newFriendRequest['Id'] = $User['Id'];","\t$newFriendRequest['Username'] = $User['Username'];","\t$newFriendList = json_decode($User['FriendRequests'], true);","\t","\tif($newFriendList === null) {","\t\t$newFriendList = array();","\t} ","\tarray_push($newFriendList, $newFriendRequest);","\t$stmt = \"UPDATE logins SET FriendRequests=:friends WHERE Username=:contact;\";","\t$query = $db->prepare($stmt);","\t$query->execute(array('friends'=>json_encode($newFriendList), 'contact'=>$Contact['Username']));","\t$result = $query->rowCount();","\tif($result > 0) {","\t\techo \"Successfully updated \" . $result . \" rows!\";","\t\treturn true;","\t} else {","\t\treturn false;","\t}","}\t","","//Returns whether or not a user already has sent a friend request to a parsed contact.","function FriendRequestAlreadySent($User, $Contact, $db) {","\t$stmt = \"SELECT * FROM logins WHERE Username=:contact_username\";","\t","\t$query = $db->prepare($stmt);","\t$query->execute(array('contact_username'=>$Contact['Username']));","\t","\t$result = $query->fetchAll(PDO::FETCH_ASSOC);","\t","\tif(!$result) {","\t\tThrowService();","\t\treturn;","\t}","\t$TempFriendRequests = json_decode($result[0]['FriendRequests'], true);","\tif($TempFriendRequests !== null) {","\t\tforeach($TempFriendRequests as $request) {","\t\t\tif($request['Username'] === $Contact['Username']) {","\t\t\t\treturn true;","\t\t\t}","\t\t}","\t}","\treturn false;","}","","//Sends a message from a user to a parsed contact.","function SendMessage($User, $Message, $Contact) {","\t","\t$db = CreateConnectionObject();","\tif($db === false) { ThrowService(); return false; }","","\tif(!IsFriend($User, $Contact, $db)) {","\t\techo \"Missing Requirements - User is not a friend!\";","\t\treturn;","\t}","\t$tableName = CreateConversationString($User['Username'], $Contact->Username);","","\tif(!ConversationExistsFromString($tableName, $db)) {","\t\tCreateNewConversation($User, $Contact);","\t}","\t$stmt = \"INSERT INTO \" . $tableName . \" (sender, message) VALUES (:sender, :message);\";","\t$query = $db->prepare($stmt);","\t$query->execute(array('sender'=>$User['Username'], 'message'=>$Message));","\t","\t$result = $query->rowCount();","\techo $result;","\tif($result > 0) {","\t\treturn true;","\t} else {","\t\tThrowService();","\t\treturn false;","\t}","}","","function RemoveContact($User, $Contact) {","\t$db = CreateConnectionObject();","\tif($db === false) { ThrowService(); return false; }","\t","\tif(!IsFriend($User, $Contact, $db)) {","\t\tThrowInternal();","\t}","\t","\t","}","","//Returns whether or not a user is friends with a parsed contact.","function IsFriend($User, $Contact, $db) {","\t$ExistingContactList = GetContacts($User['Username'], $User['Password']);","\t$ContactList = json_decode($ExistingContactList, true);","\tfor($i = 0; $i < count($ContactList); $i++) {","\t\techo $ContactList[$i]['Username'];","\t\techo $Contact->Username;","\t\tif($ContactList[$i]['Username'] === $Contact->Username) {","\t\t\treturn true;","\t\t}","\t}","\treturn false;","","}","","//Creates a new conversation between are user and a parsed contact.","function CreateNewConversation($user, $contact) {","\t","\t$db = CreateConnectionObject();","\t//$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);","\t","\tif(ConversationExists($user, $contact, $db)) {","\t\tThrowConflict();","\t\treturn false;","\t}","\t$tableName = CreateConversationString($user['Username'], $contact->Username);","\t$stmt = \"CREATE TABLE \" . $tableName . \" (","    id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, ","    sender VARCHAR(30) NOT NULL,","    message VARCHAR(30) NOT NULL,","    sent_time TIMESTAMP","    );\";","\t\t\t\t\t","","\t$query = $db->exec($stmt);","\techo \"Conversation Made!\";","}","","//Returns whether or not a conversation exists between a user and a parsed contact.","function ConversationExists($user, $contact, $db) {","\t$tableName = CreateConversationString($user['Username'], $contact->Username);","\t$stmt = \"SHOW TABLES LIKE '\" . $tableName . \"';\";","\t$query = $db->prepare($stmt);","\t$query->execute();","\t","\t$result = $query->rowCount();","\tif($result > 0) {","\t","\t\treturn true;","\t} else {","\t\treturn false;","\t}","} ","","//Returns whether or not a conversation exists based of a preconstructed conversation name string.","function ConversationExistsFromString($string, $db) {","\t$string = strtolower($string);","\t$stmt = \"SHOW TABLES LIKE '\" . $string . \"';\";","\t$query = $db->prepare($stmt);","\t$query->execute();","\t","\t$result = $query->rowCount();","\tif($result > 0) {","\t\treturn true;","\t} else {","\t\treturn false;","\t}","}","","//Adds a new user to the logins database. Can only be called by Admin status accounts.","function AddNewUser($username, $password, $User) {","\t$db = CreateConnectionObject();","\tif($db === false) { ","\t\tThrowService();","\t\treturn false;","\t}","\t","\t$stmt = \"INSERT INTO logins (Username, Password, Status, Banned, Contacts)","\t\t\t      VALUES (:username, :password, :status, :banned, :contact);\";","\t$query = $db->prepare($stmt);","\t$query->execute(array('username'=>$User['Username'], 'password'=>$User['Password'], 'status'=>$User['Status'], 'banned'=>'false', 'contact'=>'[]'));","\t","\t$result = $query->rowCount();","\techo \"Added \" . $result . \" users!\";","\t","}","","//Adds a contact to the requesting user.","function AddContact($username, $password, $Contact) {","\t$CurrentContacts = GetContacts($username, $password);","\t$ContactList = json_decode($CurrentContacts, true);","\t","\tif($ContactList === null) {","\t\t$ContactList = array();","\t}","\t","\tarray_push($ContactList, $Contact);","\t","\t$db = CreateConnectionObject();","\tif($db === false) { ","\t\tThrowService();","\t\treturn false;","\t}","","\t$stmt = \"UPDATE logins SET Contacts=:contacts WHERE Username=:username AND Password=:password;\";","\t$query = $db->prepare($stmt);","\t$query->execute(array(\"contacts\"=>json_encode($ContactList), \"username\"=>$username, \"password\"=>$password));","\t","\t$result = $query->rowCount();","\tif($result > 0) {","\t\techo \"Successfully updated \" . $result . \" rows!\";","\t\treturn true;","\t} else {","\t\treturn false;","\t}","\t","}","","//Returns a list of contacts for the requesting user.","function GetContacts($username, $password) {","\t$db = CreateConnectionObject();","\tif($db === false) { ","\t\tThrowService();","\t\treturn false;","\t}","\t","\t$stmt = \"SELECT * FROM logins WHERE Username=:username AND Password=:password;\";","\t$query = $db->prepare($stmt);","\t$query->execute(array(\"username\"=>$username, \"password\"=>$password));","\t","\t$result = $query->fetchAll(PDO::FETCH_ASSOC);","\tif(isset($result[0])) {","\t\treturn $result[0]['Contacts'];","\t} else {","\t\tThrowForbidden();","\t}","}","","//Returns a list of Friend Requests for a given user.","function GetFriendRequests($User) {","\t$db = CreateConnectionObject();","\tif($db === false) { ","\t\tThrowService();","\t\treturn false;","\t}","\t","\t$stmt = \"SELECT * FROM logins WHERE Username=:username AND Password=:password;\";","\t$query = $db->prepare($stmt);","\t$query->execute(array(\"username\"=>$User['Username'], \"password\"=>$User['Password']));","\t","\t$result = $query->fetchAll(PDO::FETCH_ASSOC);","\tif(isset($result[0])) {","\t\techo json_encode($result[0]['FriendRequests']);","\t} else {","\t\tThrowForbidden();","\t}","}","","//Returns a list of conversations for a given user.","function GetConversationList($User) {","\t$Contacts = json_decode(GetContacts($User['Username'], $User['Password']), true);","\t","\t$PossibleConversations = array();","\t","\tforeach($Contacts as $contact) {","\t\t$convoName = CreateConversationString($User['Username'], $contact['Username']);","\t\t$PossibleConversationObject = new PossibleObject($convoName, $contact['Username']);","\t\tarray_push($PossibleConversations, $PossibleConversationObject);","\t}","\t","\t$db = CreateConnectionObject();","\tif($db === false) { ThrowService(); return; }","\t","\t$ConversationList = array();","\t","\tforeach($PossibleConversations as $conversationObject) {","\t\tif(ConversationExistsFromString($conversationObject->ConversationName, $db)) {","\t\t\t$conversationString = strtolower($conversationObject->ConversationName);","\t\t\t$stmt = \"SELECT * FROM \". $conversationString .\";\";","\t\t\t$query = $db->prepare($stmt);","\t\t\t$query->execute();","\t\t\t","\t\t\t$result = $query->fetchAll(PDO::FETCH_ASSOC);","","\t\t\t$Conversation = new Conversation($result, $conversationString, $conversationObject->ContactName);","\t\t\tarray_push($ConversationList, $Conversation);","\t\t}","\t}","\t","\t//ThrowDefaultSuccess($ConversationList);","\techo json_encode($ConversationList);","}","","//Validates user credentials and returns the user.","function AuthenticateUser($username, $password) {","","\t$db = CreateConnectionObject();","\tif($db === false) { ","\t\tThrowService();","\t\treturn false;","\t}","\t","\t$stmt = \"SELECT * FROM logins WHERE Username=:username AND Password=:password;\";","\t$query = $db->prepare($stmt);","\t$query->execute(array(\"username\"=>$username, \"password\"=>$password));","\t","\t$results = $query->fetchAll(PDO::FETCH_ASSOC);","\t","\tif(isset($results[0])) {","\t\treturn $results[0];","\t} else {","\t\treturn false;","\t}","\t","}","","//Creates the database object used in many other api functions.","function CreateConnectionObject() {","\ttry {","\t\t$dsn = \"mysql:host=localhost;dbname=appdatabase;charset=utf8;\";","\t\t$db = new PDO($dsn, 'root', 'pass');","\t}","\tcatch(PDOException $e) {","\t\t//If the database object cannot be instantiated.","\t\techo $e->getMessage();","\t\treturn;","\t}","\t","\tif(isset($db)) {","\t\treturn $db;","\t} else {","\t\treturn false;","\t}","}","","","// Other Functions //","","//Returns a the correct format for a conversation table name between two usernames.","function CreateConversationString($nameOne, $nameTwo) {","\t$index = 0;","\twhile($nameOne[$index] === $nameTwo[$index]) {","\t\t$index++;","","\t\tif($index > strlen($nameOne)-1) {\t\t\t","\t\t\treturn \"conversation_\" . $nameOne . \"_\" . $nameTwo;","\t\t}","\t\tif( $index > strlen($nameTwo)-1) {","\t\t\treturn \"conversation_\" . $nameTwo . \"_\" . $nameOne;","\t\t}","\t}","\t","\tif(strtolower($nameOne[$index]) < strtolower($nameTwo[$index])) {","","\t\treturn \"conversation_\" . $nameOne . \"_\" . $nameTwo;","\t} else {","\t\treturn \"conversation_\" . $nameTwo . \"_\" . $nameOne;","\t}","}","","// Error Throwing Functions //","","function ThrowPrecondition() {","\t$HttpResponse = new HttpResponse(HttpResponse::STATUS_PRECONDITION_FAILED, \"Precondition Failed (412).\");","\techo json_encode($HttpResponse);","}","","function ThrowForbidden() {","\t$HttpResponse = new HttpResponse(HttpResponse::STATUS_FORBIDDEN, \"Forbidden. Insufficient Permissions (403).\");","\techo json_encode($HttpResponse);","}","","function ThrowUnauthorized() {","\t$HttpResponse = new HttpResponse(HttpResponse::STATUS_UNAUTHORIZED, \"Forbidden. Authentication Failed (401).\");","\techo json_encode($HttpResponse);","}","","function ThrowService() {","\t$HttpResponse = new HttpResponse(HttpResponse::STATUS_SERVICE_ERROR,  \"Service Unavailable (503) - Server Unavailable.\");","\techo json_encode($HttpResponse);","\t","}","","function ThrowConflict() {","\t$HttpResponse = new HttpResponse(HttpResponse::STATUS_CONFLICT,  \"Conflict (409) - Resource already exists.\");","\techo json_encode($HttpResponse);","}","","function ThrowInternal() {","\t$HttpResponse = new HttpResponse(HttpResponse::STATUS_CONFLICT,  \"Internal Server Error (500).\");","\techo json_encode($HttpResponse);","\treturn;","}","","function ThrowDefaultSuccess($Response) {","\t$HttpResponse = new HttpResponse(HttpResponse::STATUS_OK, $Response);","\techo json_encode($HttpResponse);","}","","function ThrowSuccess($Status, $Response) {","\t$HttpResponse = new HttpResponse($Status, $Response);","\techo json_encode($HttpResponse);","}","","function ThrowBadRequest() {","\t$HttpResponse = new HttpResponse(HttpResponse::STATUS_BAD_REQUEST, \"Bad Request (400)\");","\techo json_encode($HttpResponse);","}","// Test Functions //","","function run($username, $password) {","\t//This function is purely a test function to add a couple of contacts to a new user whom doesn't have any yet."," ","\t$Person['Username'] = \"bob\";","\t$Person['Id'] = \"10\"; ","\t $Person2['Username'] = \"bill\";","\t$Person2['Id'] = \"11\"; ","\t$Person3['Username'] = \"baxter\";","\t$Person3['Id'] = \"12\"; ","\t$TempContacts = array();","\tarray_push($TempContacts, $Person);","\tarray_push($TempContacts, $Person2);","\tarray_push($TempContacts, $Person3);","","","\t$db = CreateConnectionObject();","\t","\t$stmt = \"UPDATE logins SET Contacts=:contact WHERE Username=:username AND Password=:password;\"; ","","\t$query = $db->prepare($stmt);","\t$query->execute(array(\"contact\"=> json_encode($TempContacts), \"username\"=>$username, \"password\"=>$password));","","\techo \"ran\";","}","","?>"]}]]},"ace":{"folds":[],"scrolltop":9219.75,"scrollleft":0,"selection":{"start":{"row":729,"column":2},"end":{"row":729,"column":2},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":657,"state":"php-start","mode":"ace/mode/php"}},"timestamp":1505654301752,"hash":"74c7fccb33a5effd34bffd5d467ecc6c61c9d2c1"}