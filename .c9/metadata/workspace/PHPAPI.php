{"changed":true,"filter":false,"title":"PHPAPI.php","tooltip":"/PHPAPI.php","value":"<?php\n\n/*   #API o' Magic # \n   [Partially Commented Version] */\n   \n   \n/*\n\n[Request List]:\n\n\t- 'Login' - Authenticates requesting user and returns all information stored in the database associated with\n\t\t\t\t   that user.\n\t\t\t\t   \n    - 'GetContacts' - Returns requesting user's Contact List.\n\t\n\t- 'GetId' - Returns requesting user's database Id.\n\t\n\t- 'AddContact' - Adds a contact to the requesting user's contact list.\n\t\n\t- 'NewUser' - Adds a new user to the messenger app.\n\n[Error List]:\n\n\t- Forbidden (403) - Thrown when a user's credentials fail to Authenticate.\n\n\t- Precondition Failed (412) - Thrown when an API call lacks essential post information.\n\n*/   \n\nclass Conversation {\n\n\tpublic $Contact;\n\tpublic $Messages;\n\tpublic $ConversationId;\n\t\n\tfunction __construct($par1, $par2, $par3) {\n\t\t$this->Messages = $par1;\n\t\t$this->ConversationId = $par2;\n\t\t$this->Contact = $par3;\n\t}\n}\n\nclass PossibleObject {\n\t\n\tpublic $ConversationName;\n\tpublic $ContactName;\n\t\n\tfunction __construct($par1, $par2) {\n\t\t\n\t\t$this->ConversationName = $par1;\n\t\t$this->ContactName = $par2;\n\t\t\n\t}\n\t\n}\n\nclass HttpResponse {\n\n\t//Error\n\tconst STATUS_PRECONDITION_FAILED = 412;\n\tconst STATUS_FORBIDDEN = 403;\n\tconst STATUS_INTERNAL_SERVER_ERROR = 500;\n\tconst STATUS_UNPROCESSABLE_ENTITY = 422;\n\tconst STATUS_CONFLICT = 409;\n\tconst STATUS_SERVICE_ERROR = 503;\n\tconst STATUS_BAD_REQUEST = 400;\n\t\n\t//Success\n\tconst STATUS_OK = 200;\n\tconst STATUS_CREATED = 201;\n\tconst STATUS_ACCEPTED = 202;\n\tconst STATUS_UNAUTHORIZED = 401;\n\t\n\tpublic $Status;\n\tpublic $Response;\n\t\n\tfunction __construct($par1, $par2) {\n\t\t$this->Status = $par1;\n\t\t$this->Response = $par2;\n\t}\n\t\n}\n\n/*\n$TempUser['Id'] = \"3\";\n$TempUser['Username'] = \"Warpeddemon\" ;\n$TempUser['Password'] =  \"pass\";\n$TempUser['Status'] = \"User\";\n$TempUser['Banned'] = \"false\";\n$TempUser['Contacts'] = \"[{}]\";  \n\n  \n$Person2['Username'] = \"RightBehindu\";\n$Person2['Id'] = \"1\"; \n*/\n//$Person3['Username'] = \"bob\";\n//$Person3['Id'] = \"2\";\n  /* \n // TEST CHUNK #1 \n \n$_POST['Username'] = \"Warpeddemon\";\n$_POST['Password'] = \"pass\";\n$_POST['Message'] = \"HELLO THAR\";\n$_POST['Request'] = \"AcceptFriendRequest\";\n$_POST['Contact'] = $Person2;  \n*/\n// TEST CHUNK #2 \n$_POST['Username'] = \"RightBehindu\";\n$_POST['Password'] = \"yellow12\";\n$_POST['Request'] = \"Login\";\n$_POST['Contact'] = '{\"Id\":\"10\",\"Username\":\"bill\"}';\n$_POST['Message'] = \"Hhi\";  \n\n \nif($_POST) {\n\t//If attempting to access sensitive data which requires user credentials.\n\tif(!isset($_POST['Username']) || !isset($_POST['Password']) || !isset($_POST['Request'])) {\n\t\t//If the base expected POST variables are not met, throw error 412.\n\t\techo ThrowPrecondition();\n\t\treturn;\n\t}\n\t\n\t$Request = $_POST['Request'];\n\t$User = AuthenticateUser($_POST['Username'], $_POST['Password']);\n\t\n\t//If the user is returned as false, throw a forbidden 403 error.\n\tif($User === false) {\n\t\tThrowUnauthorized();\n\t\treturn;\n\t}\n\n\t\n\t// API EVENT REQUESTS  //\n\t\n\tif($Request === \"Login\") {\n\t\techo json_encode($User);\n\t\treturn;\n\t}\n\t\n\tif($Request === \"NewUser\") {\n\t\tif(!isset($_POST['NewUser'])) {\n\t\t\tThrowPrecondition();\n\t\t\treturn;\n\t\t} else {\n\t\t\tif($User['Status'] === \"Admin\") {\n\t\t\t\tAddNewUser($_POST['Username'], $_POST['Password'], $_POST['NewUser']);\n\t\t\t} else {\n\t\t\t\tThrowForbidden();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif($Request === \"GetContacts\") {\n\t\techo json_encode($User['Contacts']);\n\t\treturn;\n\t} \n\t\n\tif($Request === \"GetId\") {\n\t\techo json_encode($User['Id']);\n\t\treturn;\n\t}\n\t\n\tif($Request === \"AddContact\") {\n\t\tif(!isset($_POST['NewContact'])) {\n\t\t\t//If the new contact to add has not been defined.\n\t\t\tThrowPrecondition();\n\t\t\treturn;\n\t\t} else {\n\t\t\t$result = AddContact($_POST['Username'], $_POST['Password'], $_POST['NewContact']);\n\t\t\tif($result) {\n\t\t\t\techo true;\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tThrowService();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif($Request === \"NewConversation\") {\n\t\tif(!isset($_POST['Contact'])) {\n\t\t\tThrowPrecondition();\n\t\t\treturn;\n\t\t}\n\t\tCreateNewConversation($User, $_POST['Contact']);\n\t\treturn;\n\t}\n\t\n\tif($Request === \"AddContactsTemp\") {\n\t\trun($_POST['Username'], $_POST['Password']);\n\t}\n\t\n\t\n\tif($Request === \"NewMessage\") {\n\t\tif(!isset($_POST['Message']) || !isset($_POST['Contact'])) {\n\t\t\tThrowPrecondition();\n\t\t\treturn;\n\t\t}\n\t\t$_POST['Contact'] = json_decode($_POST['Contact']);\n\t\tSendMessage($User, $_POST['Message'], $_POST['Contact']);\n\t\treturn;\n\t}\n\t\n\tif($Request === \"FriendRequest\") {\n\t\tif(!isset($_POST['Contact'])) {\n\t\t\tThrowPrecondition();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tSendFriendRequest($User, $_POST['Contact']);\n\t\treturn;\n\t}\n\t\n\tif($Request === \"AcceptFriendRequest\") {\n\t\tif(!isset($_POST['Contact'])) {\n\t\t\tThrowPrecondition();\n\t\t\treturn;\n\t\t}\n\t\tAcceptFriendRequest($User, $_POST['Contact']);\n\t\treturn;\n\t}\n\t\n\tif($Request === \"GetConversations\") {\n\t\tGetConversationList($User);\n\t\treturn;\n\t}\n\t\n\tif($Request === \"GetFriendRequests\") {\n\t\tGetFriendRequests($User);\n\t\treturn;\n\t}\n\t\n\tThrowBadRequest();\n\treturn;\n}\n\n\t// API FUNCTIONS //\n\n//Accepts a friend request for a user from a parsed contact.\nfunction AcceptFriendRequest($User, $Contact) {\n\t\n\t$db = CreateConnectionObject();\n\tif($db === false) { ThrowService(); return; }\n\t\n\t$CurrentFriendRequests = json_decode($User['FriendRequests'], true);\n\t\n\tif($CurrentFriendRequests === null) {\n\t\tThrowInternal();\n\t\treturn;\n\t}\n\tfor($i = 0; $i < count($CurrentFriendRequests); $i++) {\n\t\t$request = $CurrentFriendRequests[$i];\n\t\tif($request['Username'] === $Contact['Username']) {\n\t\t\t$NewFriendRequests = $CurrentFriendRequests;\n\t\t\tarray_splice($NewFriendRequests, $i, 1);\n\t\t\t$result = UpdateUserRequests($User, $NewFriendRequests, $db);\n\t\t\tAddContact($User['Username'], $User['Password'], $Contact);\n\t\t\tif(!$result) {\n\t\t\t\t//If there was no update.\n\t\t\t\tThrowInternal();\n\t\t\t\tThrowService();\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\techo \"\\nAccepted!\";\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\tThrowInternal();\n\treturn false;\n}\n\n//Updates a users friend requests with a parsed friend request. Used in SendFriendRequest.\nfunction UpdateUserRequests($User, $FriendRequests, $db) {\n\n\t\n\t$stmt = \"UPDATE logins SET FriendRequests=:friends WHERE Username=:username AND Id=:id\";\n\t$query = $db->prepare($stmt);\n\t$query->execute(array('friends'=>json_encode($FriendRequests), 'username'=>$User['Username'],'id'=>$User['Id']));\n\t\n\t$result = $query->rowCount();\n\t\n\tif($result > 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\t\n//Sends a friend request from a user to a parsed contact.\nfunction SendFriendRequest($User, $Contact) {\n\t\n\t$db = CreateConnectionObject();\n\tif($db === false) { ThrowService(); return; }\n\n\tif(isFriend($User, $Contact, $db)) {\n\t\techo \"Bad Request (400) - User is already a friend\";\n\t\treturn;\n\t}\n\t\n\tif(FriendRequestAlreadySent($User, $Contact, $db)) {\n\t\techo \"Bad Request (400) - User has already requested to be friends with this user.\";\n\t\treturn;\n\t}\n\t\n\t$newFriendRequest = array();\n\t$newFriendRequest['Id'] = $User['Id'];\n\t$newFriendRequest['Username'] = $User['Username'];\n\t$newFriendList = json_decode($User['FriendRequests'], true);\n\t\n\tif($newFriendList === null) {\n\t\t$newFriendList = array();\n\t} \n\tarray_push($newFriendList, $newFriendRequest);\n\t$stmt = \"UPDATE logins SET FriendRequests=:friends WHERE Username=:contact;\";\n\t$query = $db->prepare($stmt);\n\t$query->execute(array('friends'=>json_encode($newFriendList), 'contact'=>$Contact['Username']));\n\t$result = $query->rowCount();\n\tif($result > 0) {\n\t\techo \"Successfully updated \" . $result . \" rows!\";\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\t\n\n//Returns whether or not a user already has sent a friend request to a parsed contact.\nfunction FriendRequestAlreadySent($User, $Contact, $db) {\n\t$stmt = \"SELECT * FROM logins WHERE Username=:contact_username\";\n\t\n\t$query = $db->prepare($stmt);\n\t$query->execute(array('contact_username'=>$Contact['Username']));\n\t\n\t$result = $query->fetchAll(PDO::FETCH_ASSOC);\n\t\n\tif(!$result) {\n\t\tThrowService();\n\t\treturn;\n\t}\n\t$TempFriendRequests = json_decode($result[0]['FriendRequests'], true);\n\tif($TempFriendRequests !== null) {\n\t\tforeach($TempFriendRequests as $request) {\n\t\t\tif($request['Username'] === $Contact['Username']) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n//Sends a message from a user to a parsed contact.\nfunction SendMessage($User, $Message, $Contact) {\n\t\n\t$db = CreateConnectionObject();\n\tif($db === false) { ThrowService(); return false; }\n\n\tif(!IsFriend($User, $Contact, $db)) {\n\t\techo \"Missing Requirements - User is not a friend!\";\n\t\treturn;\n\t}\n\t$tableName = CreateConversationString($User['Username'], $Contact->Username);\n\n\tif(!ConversationExistsFromString($tableName, $db)) {\n\t\tCreateNewConversation($User, $Contact);\n\t}\n\t$stmt = \"INSERT INTO \" . $tableName . \" (sender, message) VALUES (:sender, :message);\";\n\t$query = $db->prepare($stmt);\n\t$query->execute(array('sender'=>$User['Username'], 'message'=>$Message));\n\t\n\t$result = $query->rowCount();\n\techo $result;\n\tif($result > 0) {\n\t\treturn true;\n\t} else {\n\t\tThrowService();\n\t\treturn false;\n\t}\n}\n\nfunction RemoveContact($User, $Contact) {\n\t$db = CreateConnectionObject();\n\tif($db === false) { ThrowService(); return false; }\n\t\n\tif(!IsFriend($User, $Contact, $db)) {\n\t\tThrowInternal();\n\t}\n\t\n\t\n}\n\n//Returns whether or not a user is friends with a parsed contact.\nfunction IsFriend($User, $Contact, $db) {\n\t$ExistingContactList = GetContacts($User['Username'], $User['Password']);\n\t$ContactList = json_decode($ExistingContactList, true);\n\tfor($i = 0; $i < count($ContactList); $i++) {\n\t\techo $ContactList[$i]['Username'];\n\t\techo $Contact->Username;\n\t\tif($ContactList[$i]['Username'] === $Contact->Username) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n\n}\n\n//Creates a new conversation between are user and a parsed contact.\nfunction CreateNewConversation($user, $contact) {\n\t\n\t$db = CreateConnectionObject();\n\t//$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\t\n\tif(ConversationExists($user, $contact, $db)) {\n\t\tThrowConflict();\n\t\treturn false;\n\t}\n\t$tableName = CreateConversationString($user['Username'], $contact->Username);\n\t$stmt = \"CREATE TABLE \" . $tableName . \" (\n    id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, \n    sender VARCHAR(30) NOT NULL,\n    message VARCHAR(30) NOT NULL,\n    sent_time TIMESTAMP\n    );\";\n\t\t\t\t\t\n\n\t$query = $db->exec($stmt);\n\techo \"Conversation Made!\";\n}\n\n//Returns whether or not a conversation exists between a user and a parsed contact.\nfunction ConversationExists($user, $contact, $db) {\n\t$tableName = CreateConversationString($user['Username'], $contact->Username);\n\t$stmt = \"SHOW TABLES LIKE '\" . $tableName . \"';\";\n\t$query = $db->prepare($stmt);\n\t$query->execute();\n\t\n\t$result = $query->rowCount();\n\tif($result > 0) {\n\t\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n} \n\n//Returns whether or not a conversation exists based of a preconstructed conversation name string.\nfunction ConversationExistsFromString($string, $db) {\n\t$string = strtolower($string);\n\t$stmt = \"SHOW TABLES LIKE '\" . $string . \"';\";\n\t$query = $db->prepare($stmt);\n\t$query->execute();\n\t$result = $query->rowCount();\n\tif($result > 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n//Adds a new user to the logins database. Can only be called by Admin status accounts.\nfunction AddNewUser($username, $password, $User) {\n\t$db = CreateConnectionObject();\n\tif($db === false) { \n\t\tThrowService();\n\t\treturn false;\n\t}\n\t\n\t$stmt = \"INSERT INTO logins (Username, Password, Status, Banned, Contacts)\n\t\t\t      VALUES (:username, :password, :status, :banned, :contact);\";\n\t$query = $db->prepare($stmt);\n\t$query->execute(array('username'=>$User['Username'], 'password'=>$User['Password'], 'status'=>$User['Status'], 'banned'=>'false', 'contact'=>'[]'));\n\t\n\t$result = $query->rowCount();\n\techo \"Added \" . $result . \" users!\";\n\t\n}\n\n//Adds a contact to the requesting user.\nfunction AddContact($username, $password, $Contact) {\n\t$CurrentContacts = GetContacts($username, $password);\n\t$ContactList = json_decode($CurrentContacts, true);\n\t\n\tif($ContactList === null) {\n\t\t$ContactList = array();\n\t}\n\t\n\tarray_push($ContactList, $Contact);\n\t\n\t$db = CreateConnectionObject();\n\tif($db === false) { \n\t\tThrowService();\n\t\treturn false;\n\t}\n\n\t$stmt = \"UPDATE logins SET Contacts=:contacts WHERE Username=:username AND Password=:password;\";\n\t$query = $db->prepare($stmt);\n\t$query->execute(array(\"contacts\"=>json_encode($ContactList), \"username\"=>$username, \"password\"=>$password));\n\t\n\t$result = $query->rowCount();\n\tif($result > 0) {\n\t\techo \"Successfully updated \" . $result . \" rows!\";\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n\t\n}\n\n//Returns a list of contacts for the requesting user.\nfunction GetContacts($username, $password) {\n\t$db = CreateConnectionObject();\n\tif($db === false) { \n\t\tThrowService();\n\t\treturn false;\n\t}\n\t\n\t$stmt = \"SELECT * FROM logins WHERE Username=:username AND Password=:password;\";\n\t$query = $db->prepare($stmt);\n\t$query->execute(array(\"username\"=>$username, \"password\"=>$password));\n\t\n\t$result = $query->fetchAll(PDO::FETCH_ASSOC);\n\tif(isset($result[0])) {\n\t\treturn $result[0]['Contacts'];\n\t} else {\n\t\tThrowForbidden();\n\t}\n}\n\n//Returns a list of Friend Requests for a given user.\nfunction GetFriendRequests($User) {\n\t$db = CreateConnectionObject();\n\tif($db === false) { \n\t\tThrowService();\n\t\treturn false;\n\t}\n\t\n\t$stmt = \"SELECT * FROM logins WHERE Username=:username AND Password=:password;\";\n\t$query = $db->prepare($stmt);\n\t$query->execute(array(\"username\"=>$User['Username'], \"password\"=>$User['Password']));\n\t\n\t$result = $query->fetchAll(PDO::FETCH_ASSOC);\n\tif(isset($result[0])) {\n\t\techo json_encode($result[0]['FriendRequests']);\n\t} else {\n\t\tThrowForbidden();\n\t}\n}\n\n//Returns a list of conversations for a given user.\nfunction GetConversationList($User) {\n\t$Contacts = json_decode(GetContacts($User['Username'], $User['Password']), true);\n\t//echo json_encode($Contacts);\n\t$PossibleConversations = array();\n\t\n\tforeach($Contacts as $contact) {\n\t\t$convoName = CreateConversationString($User['Username'], $contact['Username']);\n\t\t$PossibleConversationObject = new PossibleObject($convoName, $contact['Username']);\n\t\tarray_push($PossibleConversations, $PossibleConversationObject);\n\t}\n\t\n\t\n\t\n\t$db = CreateConnectionObject();\n\tif($db === false) { ThrowService(); return; }\n\t\n\t$ConversationList = array();\n\t\n\tforeach($PossibleConversations as $conversationObject) {\n\t\tif(ConversationExistsFromString($conversationObject->ConversationName, $db)) {\n\t\t\t$conversationString = strtolower($conversationObject->ConversationName);\n\t\t\t\n\t\t\t$stmt = \"SELECT * FROM \". $conversationString .\";\";\n\t\t\t$query = $db->prepare($stmt);\n\t\t\t$query->execute();\n\t\t\t\n\t\t\t$result = $query->fetchAll(PDO::FETCH_ASSOC);\n\t\t\t\n\t\t\t$Conversation = new Conversation($result, $conversationString, $conversationObject->ContactName);\n\t\t\tarray_push($ConversationList, $Conversation);\n\t\t}\n\t}\n\t\n\t//ThrowDefaultSuccess($ConversationList);\n\techo json_encode($ConversationList);\n}\n\n//Validates user credentials and returns the user.\nfunction AuthenticateUser($username, $password) {\n\n\t$db = CreateConnectionObject();\n\tif($db === false) { \n\t\tThrowService();\n\t\treturn false;\n\t}\n\t\n\t$stmt = \"SELECT * FROM logins WHERE Username=:username AND Password=:password;\";\n\t$query = $db->prepare($stmt);\n\t$query->execute(array(\"username\"=>$username, \"password\"=>$password));\n\t\n\t$results = $query->fetchAll(PDO::FETCH_ASSOC);\n\t\n\tif(isset($results[0])) {\n\t\treturn $results[0];\n\t} else {\n\t\treturn false;\n\t}\n\t\n}\n\n//Creates the database object used in many other api functions.\nfunction CreateConnectionObject() {\n\ttry {\n\t\t$dsn = \"mysql:host=223.27.22.124;dbname=DatabaseAppServer;charset=utf8;\";\n\t\t$db = new PDO($dsn, '04student', 't3ddyb3ar');\n\t}\n\tcatch(PDOException $e) {\n\t\t//If the database object cannot be instantiated.\n\t\techo $e->getMessage();\n\t\treturn false;\n\t}\n\t\n\tif(isset($db)) {\n\t\tif($db == null) {\n\t\t\treturn false;\n\t\t}\n\t\treturn $db;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n\n// Other Functions //\n\n//Returns a the correct format for a conversation table name between two usernames.\nfunction CreateConversationString($nameOne, $nameTwo) {\n\t$index = 0;\n\twhile($nameOne[$index] === $nameTwo[$index]) {\n\t\t$index++;\n\n\t\tif($index > strlen($nameOne)-1) {\t\t\t\n\t\t\treturn \"conversation_\" . $nameOne . \"_\" . $nameTwo;\n\t\t}\n\t\tif( $index > strlen($nameTwo)-1) {\n\t\t\treturn \"conversation_\" . $nameTwo . \"_\" . $nameOne;\n\t\t}\n\t}\n\t\n\tif(strtolower($nameOne[$index]) < strtolower($nameTwo[$index])) {\n\n\t\treturn \"conversation_\" . strtolower($nameOne) . \"_\" . strtolower($nameTwo);\n\t} else {\n\t\treturn \"conversation_\" . strtolower($nameTwo) . \"_\" . strtolower($nameOne);\n\t}\n}\n\n// Error Throwing Functions //\n\nfunction ThrowPrecondition() {\n\t$HttpResponse = new HttpResponse(HttpResponse::STATUS_PRECONDITION_FAILED, \"Precondition Failed (412).\");\n\techo json_encode($HttpResponse);\n}\n\nfunction ThrowForbidden() {\n\t$HttpResponse = new HttpResponse(HttpResponse::STATUS_FORBIDDEN, \"Forbidden. Insufficient Permissions (403).\");\n\techo json_encode($HttpResponse);\n}\n\nfunction ThrowUnauthorized() {\n\t$HttpResponse = new HttpResponse(HttpResponse::STATUS_UNAUTHORIZED, \"Forbidden. Authentication Failed (401).\");\n\techo json_encode($HttpResponse);\n}\n\nfunction ThrowService() {\n\t$HttpResponse = new HttpResponse(HttpResponse::STATUS_SERVICE_ERROR,  \"Service Unavailable (503) - Server Unavailable.\");\n\techo json_encode($HttpResponse);\n\t\n}\n\nfunction ThrowConflict() {\n\t$HttpResponse = new HttpResponse(HttpResponse::STATUS_CONFLICT,  \"Conflict (409) - Resource already exists.\");\n\techo json_encode($HttpResponse);\n}\n\nfunction ThrowInternal() {\n\t$HttpResponse = new HttpResponse(HttpResponse::STATUS_CONFLICT,  \"Internal Server Error (500).\");\n\techo json_encode($HttpResponse);\n\treturn;\n}\n\nfunction ThrowDefaultSuccess($Response) {\n\t$HttpResponse = new HttpResponse(HttpResponse::STATUS_OK, $Response);\n\techo json_encode($HttpResponse);\n}\n\nfunction ThrowSuccess($Status, $Response) {\n\t$HttpResponse = new HttpResponse($Status, $Response);\n\techo json_encode($HttpResponse);\n}\n\nfunction ThrowBadRequest() {\n\t$HttpResponse = new HttpResponse(HttpResponse::STATUS_BAD_REQUEST, \"Bad Request (400)\");\n\techo json_encode($HttpResponse);\n}\n// Test Functions //\n\nfunction run($username, $password) {\n\t//This function is purely a test function to add a couple of contacts to a new user whom doesn't have any yet.\n \n\t$Person['Username'] = \"bob\";\n\t$Person['Id'] = \"10\"; \n\t $Person2['Username'] = \"bill\";\n\t$Person2['Id'] = \"11\"; \n\t$Person3['Username'] = \"baxter\";\n\t$Person3['Id'] = \"12\"; \n\t$TempContacts = array();\n\tarray_push($TempContacts, $Person);\n\tarray_push($TempContacts, $Person2);\n\tarray_push($TempContacts, $Person3);\n\n\n\t$db = CreateConnectionObject();\n\t\n\t$stmt = \"UPDATE logins SET Contacts=:contact WHERE Username=:username AND Password=:password;\"; \n\n\t$query = $db->prepare($stmt);\n\t$query->execute(array(\"contact\"=> json_encode($TempContacts), \"username\"=>$username, \"password\"=>$password));\n\n\techo \"ran\";\n}\n\n?>","undoManager":{"mark":70,"position":100,"stack":[[{"start":{"row":613,"column":50},"end":{"row":613,"column":51},"action":"insert","lines":["A"],"id":744}],[{"start":{"row":613,"column":53},"end":{"row":613,"column":54},"action":"remove","lines":["s"],"id":745}],[{"start":{"row":613,"column":53},"end":{"row":613,"column":54},"action":"insert","lines":["S"],"id":746}],[{"start":{"row":614,"column":23},"end":{"row":614,"column":27},"action":"remove","lines":["root"],"id":747},{"start":{"row":614,"column":23},"end":{"row":614,"column":24},"action":"insert","lines":["o"]}],[{"start":{"row":614,"column":24},"end":{"row":614,"column":25},"action":"insert","lines":["4"],"id":748}],[{"start":{"row":614,"column":24},"end":{"row":614,"column":25},"action":"remove","lines":["4"],"id":749}],[{"start":{"row":614,"column":23},"end":{"row":614,"column":24},"action":"remove","lines":["o"],"id":750}],[{"start":{"row":614,"column":23},"end":{"row":614,"column":24},"action":"insert","lines":["0"],"id":751}],[{"start":{"row":614,"column":24},"end":{"row":614,"column":25},"action":"insert","lines":["4"],"id":752}],[{"start":{"row":614,"column":25},"end":{"row":614,"column":26},"action":"insert","lines":["s"],"id":753}],[{"start":{"row":614,"column":26},"end":{"row":614,"column":27},"action":"insert","lines":["t"],"id":754}],[{"start":{"row":614,"column":27},"end":{"row":614,"column":28},"action":"insert","lines":["u"],"id":755}],[{"start":{"row":614,"column":28},"end":{"row":614,"column":29},"action":"insert","lines":["d"],"id":756}],[{"start":{"row":614,"column":29},"end":{"row":614,"column":30},"action":"insert","lines":["e"],"id":757}],[{"start":{"row":614,"column":30},"end":{"row":614,"column":31},"action":"insert","lines":["n"],"id":758}],[{"start":{"row":614,"column":31},"end":{"row":614,"column":32},"action":"insert","lines":["t"],"id":759}],[{"start":{"row":614,"column":36},"end":{"row":614,"column":37},"action":"insert","lines":["t"],"id":760}],[{"start":{"row":614,"column":37},"end":{"row":614,"column":38},"action":"insert","lines":["e"],"id":761}],[{"start":{"row":614,"column":38},"end":{"row":614,"column":39},"action":"insert","lines":["d"],"id":762}],[{"start":{"row":614,"column":39},"end":{"row":614,"column":40},"action":"insert","lines":["d"],"id":763}],[{"start":{"row":614,"column":40},"end":{"row":614,"column":41},"action":"insert","lines":["y"],"id":764}],[{"start":{"row":614,"column":40},"end":{"row":614,"column":41},"action":"remove","lines":["y"],"id":765}],[{"start":{"row":614,"column":39},"end":{"row":614,"column":40},"action":"remove","lines":["d"],"id":766}],[{"start":{"row":614,"column":38},"end":{"row":614,"column":39},"action":"remove","lines":["d"],"id":767}],[{"start":{"row":614,"column":37},"end":{"row":614,"column":38},"action":"remove","lines":["e"],"id":768}],[{"start":{"row":614,"column":37},"end":{"row":614,"column":38},"action":"insert","lines":["3"],"id":769}],[{"start":{"row":614,"column":38},"end":{"row":614,"column":39},"action":"insert","lines":["d"],"id":770}],[{"start":{"row":614,"column":39},"end":{"row":614,"column":40},"action":"insert","lines":["d"],"id":771}],[{"start":{"row":614,"column":40},"end":{"row":614,"column":41},"action":"insert","lines":["y"],"id":772}],[{"start":{"row":614,"column":41},"end":{"row":614,"column":42},"action":"insert","lines":["b"],"id":773}],[{"start":{"row":614,"column":42},"end":{"row":614,"column":43},"action":"insert","lines":["3"],"id":774}],[{"start":{"row":614,"column":43},"end":{"row":614,"column":44},"action":"insert","lines":["a"],"id":775}],[{"start":{"row":614,"column":44},"end":{"row":614,"column":45},"action":"insert","lines":["r"],"id":776}],[{"start":{"row":614,"column":44},"end":{"row":614,"column":45},"action":"remove","lines":["r"],"id":777}],[{"start":{"row":614,"column":43},"end":{"row":614,"column":44},"action":"remove","lines":["a"],"id":778}],[{"start":{"row":614,"column":42},"end":{"row":614,"column":43},"action":"remove","lines":["3"],"id":779}],[{"start":{"row":614,"column":41},"end":{"row":614,"column":42},"action":"remove","lines":["b"],"id":780}],[{"start":{"row":614,"column":40},"end":{"row":614,"column":41},"action":"remove","lines":["y"],"id":781}],[{"start":{"row":614,"column":39},"end":{"row":614,"column":40},"action":"remove","lines":["d"],"id":782}],[{"start":{"row":614,"column":38},"end":{"row":614,"column":39},"action":"remove","lines":["d"],"id":783}],[{"start":{"row":614,"column":37},"end":{"row":614,"column":38},"action":"remove","lines":["3"],"id":784}],[{"start":{"row":614,"column":36},"end":{"row":614,"column":37},"action":"remove","lines":["t"],"id":785}],[{"start":{"row":614,"column":36},"end":{"row":614,"column":37},"action":"insert","lines":["y"],"id":786}],[{"start":{"row":614,"column":37},"end":{"row":614,"column":38},"action":"insert","lines":["e"],"id":787}],[{"start":{"row":614,"column":38},"end":{"row":614,"column":39},"action":"insert","lines":["l"],"id":788}],[{"start":{"row":614,"column":39},"end":{"row":614,"column":40},"action":"insert","lines":["l"],"id":789}],[{"start":{"row":614,"column":40},"end":{"row":614,"column":41},"action":"insert","lines":["o"],"id":790}],[{"start":{"row":614,"column":36},"end":{"row":614,"column":41},"action":"remove","lines":["yello"],"id":791},{"start":{"row":614,"column":36},"end":{"row":614,"column":44},"action":"insert","lines":["yellow12"]}],[{"start":{"row":614,"column":31},"end":{"row":614,"column":32},"action":"remove","lines":["t"],"id":792}],[{"start":{"row":614,"column":30},"end":{"row":614,"column":31},"action":"remove","lines":["n"],"id":793}],[{"start":{"row":614,"column":29},"end":{"row":614,"column":30},"action":"remove","lines":["e"],"id":794}],[{"start":{"row":614,"column":28},"end":{"row":614,"column":29},"action":"remove","lines":["d"],"id":795}],[{"start":{"row":614,"column":27},"end":{"row":614,"column":28},"action":"remove","lines":["u"],"id":796}],[{"start":{"row":614,"column":26},"end":{"row":614,"column":27},"action":"remove","lines":["t"],"id":797}],[{"start":{"row":614,"column":25},"end":{"row":614,"column":26},"action":"remove","lines":["s"],"id":798}],[{"start":{"row":614,"column":24},"end":{"row":614,"column":25},"action":"remove","lines":["4"],"id":799}],[{"start":{"row":614,"column":23},"end":{"row":614,"column":24},"action":"remove","lines":["0"],"id":800}],[{"start":{"row":614,"column":23},"end":{"row":614,"column":24},"action":"insert","lines":["W"],"id":801}],[{"start":{"row":614,"column":23},"end":{"row":614,"column":24},"action":"remove","lines":["W"],"id":802}],[{"start":{"row":614,"column":23},"end":{"row":614,"column":24},"action":"insert","lines":["W"],"id":803}],[{"start":{"row":614,"column":24},"end":{"row":614,"column":25},"action":"insert","lines":["a"],"id":804}],[{"start":{"row":614,"column":25},"end":{"row":614,"column":26},"action":"insert","lines":["r"],"id":805}],[{"start":{"row":614,"column":26},"end":{"row":614,"column":27},"action":"insert","lines":["p"],"id":806}],[{"start":{"row":614,"column":27},"end":{"row":614,"column":28},"action":"insert","lines":["e"],"id":807}],[{"start":{"row":614,"column":28},"end":{"row":614,"column":29},"action":"insert","lines":["d"],"id":808}],[{"start":{"row":614,"column":29},"end":{"row":614,"column":30},"action":"insert","lines":["P"],"id":809}],[{"start":{"row":614,"column":30},"end":{"row":614,"column":31},"action":"insert","lines":["r"],"id":810}],[{"start":{"row":614,"column":31},"end":{"row":614,"column":32},"action":"insert","lines":["i"],"id":811}],[{"start":{"row":614,"column":32},"end":{"row":614,"column":33},"action":"insert","lines":["n"],"id":812}],[{"start":{"row":614,"column":33},"end":{"row":614,"column":34},"action":"insert","lines":["c"],"id":813}],[{"start":{"row":614,"column":34},"end":{"row":614,"column":35},"action":"insert","lines":["e"],"id":814}],[{"start":{"row":614,"column":39},"end":{"row":614,"column":47},"action":"remove","lines":["yellow12"],"id":815},{"start":{"row":614,"column":39},"end":{"row":614,"column":40},"action":"insert","lines":["t"]}],[{"start":{"row":614,"column":40},"end":{"row":614,"column":41},"action":"insert","lines":["3"],"id":816}],[{"start":{"row":614,"column":41},"end":{"row":614,"column":42},"action":"insert","lines":["d"],"id":817}],[{"start":{"row":614,"column":42},"end":{"row":614,"column":43},"action":"insert","lines":["d"],"id":818}],[{"start":{"row":614,"column":43},"end":{"row":614,"column":44},"action":"insert","lines":["y"],"id":819}],[{"start":{"row":614,"column":44},"end":{"row":614,"column":45},"action":"insert","lines":["b"],"id":820}],[{"start":{"row":614,"column":45},"end":{"row":614,"column":46},"action":"insert","lines":["3"],"id":821}],[{"start":{"row":614,"column":46},"end":{"row":614,"column":47},"action":"insert","lines":["a"],"id":822}],[{"start":{"row":614,"column":47},"end":{"row":614,"column":48},"action":"insert","lines":["r"],"id":823}],[{"start":{"row":614,"column":34},"end":{"row":614,"column":35},"action":"remove","lines":["e"],"id":824}],[{"start":{"row":614,"column":33},"end":{"row":614,"column":34},"action":"remove","lines":["c"],"id":825}],[{"start":{"row":614,"column":32},"end":{"row":614,"column":33},"action":"remove","lines":["n"],"id":826}],[{"start":{"row":614,"column":31},"end":{"row":614,"column":32},"action":"remove","lines":["i"],"id":827}],[{"start":{"row":614,"column":30},"end":{"row":614,"column":31},"action":"remove","lines":["r"],"id":828}],[{"start":{"row":614,"column":29},"end":{"row":614,"column":30},"action":"remove","lines":["P"],"id":829}],[{"start":{"row":614,"column":28},"end":{"row":614,"column":29},"action":"remove","lines":["d"],"id":830}],[{"start":{"row":614,"column":27},"end":{"row":614,"column":28},"action":"remove","lines":["e"],"id":831}],[{"start":{"row":614,"column":26},"end":{"row":614,"column":27},"action":"remove","lines":["p"],"id":832}],[{"start":{"row":614,"column":25},"end":{"row":614,"column":26},"action":"remove","lines":["r"],"id":833}],[{"start":{"row":614,"column":24},"end":{"row":614,"column":25},"action":"remove","lines":["a"],"id":834}],[{"start":{"row":614,"column":23},"end":{"row":614,"column":24},"action":"remove","lines":["W"],"id":835}],[{"start":{"row":614,"column":23},"end":{"row":614,"column":24},"action":"insert","lines":["0"],"id":836}],[{"start":{"row":614,"column":24},"end":{"row":614,"column":25},"action":"insert","lines":["4"],"id":837}],[{"start":{"row":614,"column":25},"end":{"row":614,"column":26},"action":"insert","lines":["s"],"id":838}],[{"start":{"row":614,"column":26},"end":{"row":614,"column":27},"action":"insert","lines":["t"],"id":839}],[{"start":{"row":614,"column":27},"end":{"row":614,"column":28},"action":"insert","lines":["u"],"id":840}],[{"start":{"row":614,"column":28},"end":{"row":614,"column":29},"action":"insert","lines":["d"],"id":841}],[{"start":{"row":614,"column":29},"end":{"row":614,"column":30},"action":"insert","lines":["e"],"id":842}],[{"start":{"row":614,"column":30},"end":{"row":614,"column":31},"action":"insert","lines":["n"],"id":843}],[{"start":{"row":614,"column":31},"end":{"row":614,"column":32},"action":"insert","lines":["t"],"id":844}]]},"ace":{"folds":[],"scrolltop":8160,"scrollleft":0,"selection":{"start":{"row":614,"column":32},"end":{"row":614,"column":32},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":581,"state":"php-start","mode":"ace/mode/php"}},"timestamp":1510397767910}